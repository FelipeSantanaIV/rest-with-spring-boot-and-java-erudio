package br.com.erudio;

import java.util.concurrent.atomic.AtomicLong;

import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import br.com.erudio.exceptions.UnsupportedMathOperationExceptiom;

@RestController
public class MathController {
	
	private final AtomicLong counter = new AtomicLong();
	
	//Soma dos valores A + A
	@RequestMapping(value = "/sum/{numberOne}/{numberTwo}",
			method=RequestMethod.GET)
	public Double sum(
			@PathVariable(value = "numberOne") String numberOne,
			@PathVariable(value = "numberTwo") String numberTwo
			) throws Exception{
		
		if (!isNumeric(numberOne)|| !isNumeric(numberTwo)){
			throw new UnsupportedMathOperationExceptiom("Por favor colocar um número válido.");
		}
		return convertToDouble(numberOne) + convertToDouble(numberTwo);
	}
	
	// Subtração dos valores A - A
	@RequestMapping(value = "/sub/{numberOne}/{numberTwo}",
			method=RequestMethod.GET)
	public Double sub(
			@PathVariable(value = "numberOne") String numberOne,
			@PathVariable(value = "numberTwo") String numberTwo
			) throws Exception{
		
		if (!isNumeric(numberOne)|| !isNumeric(numberTwo)){
			throw new UnsupportedMathOperationExceptiom("Por favor colocar um número válido.");
		}
		return convertToDouble(numberOne) - convertToDouble(numberTwo);
	}
	
	// Multiplicação dos valores A * A
	@RequestMapping(value = "/mult/{numberOne}/{numberTwo}",
			method=RequestMethod.GET)
	public Double mult(
			@PathVariable(value = "numberOne") String numberOne,
			@PathVariable(value = "numberTwo") String numberTwo
			) throws Exception{
		
		if (!isNumeric(numberOne)|| !isNumeric(numberTwo)){
			throw new UnsupportedMathOperationExceptiom("Por favor colocar um número válido.");
		}
		return convertToDouble(numberOne) * convertToDouble(numberTwo);
	}
	
	// Divisão dos valores A / A
	@RequestMapping(value = "/div/{numberOne}/{numberTwo}",
			method=RequestMethod.GET)
	public Double div(
			@PathVariable(value = "numberOne") String numberOne,
			@PathVariable(value = "numberTwo") String numberTwo
			) throws Exception{
		
		if (!isNumeric(numberOne)|| !isNumeric(numberTwo)){
			throw new UnsupportedMathOperationExceptiom("Por favor colocar um número válido.");
		}
		return convertToDouble(numberOne) / convertToDouble(numberTwo);
	}
	
	// Média dos valores de 5 números
	@RequestMapping(value = "/med/{numberOne}/{numberTwo}/{numberThree}"
			+ "/{numberFour}/{numberFive}",
			method=RequestMethod.GET)
	public Double med(
			@PathVariable(value = "numberOne") String numberOne,
			@PathVariable(value = "numberTwo") String numberTwo,
			@PathVariable(value = "numberThree") String numberThree,
			@PathVariable(value = "numberFour") String numberFour,
			@PathVariable(value = "numberFive") String numberFive
			) throws Exception{
		
		if (!isNumeric(numberOne)|| !isNumeric(numberTwo)){
			throw new UnsupportedMathOperationExceptiom("Por favor colocar um número válido.");
		}
		return convertToDouble(numberOne) / convertToDouble(numberTwo);
	}

	private Double convertToDouble(String strNumber) {
		if(strNumber == null) return 0D;
		// BR 10,25 - USD 10.25
		//conversão da virgula para ponto.
		String number = strNumber.replaceAll(",", ".");
		if(isNumeric(number)) return Double.parseDouble(number);
		return 0D;
	}

	private boolean isNumeric(String strNumber) {
		if(strNumber == null) return false;
		String number = strNumber.replaceAll(",", ".");
		return number.matches("[-+]?[0-9]*\\.?[0-9]+");
	}
}
